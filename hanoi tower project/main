import tkinter
from tkinter import *
from PIL import ImageTk, Image
import time
from comments import *
root = Tk()

def main():
    global root
    root.destroy()
    root = Tk()
    root.title("tower of hanoi")
    root.minsize(width=800, height=600)
    root.attributes("-alpha", 0.9)
    root.configure(background="#B4DD1E")

    title = Label(root, text='tower of hanoi', fg="black", font="Consolas 30", bg="#B4DD1E")
    title.pack()

    elem_start_pos()
    root.mainloop()


def put_tower_pieces():
    '''эта функция запускает саму игру, она создаёт изображения элементов башен (pole и img1, img2, img3, img4), заменяет кнопку start на кнопку restart, запускает счетчики времени и ходов (movescount)'''
    global img1, img2, img3, img4, canvas, pole_1, pole_2, pole_3, movescount, start_time, enter, pole

    pole = ImageTk.PhotoImage(Image.open("poles.png"))
    canvas.create_image(-20, -20, anchor=NW, image=pole)

    img1 = ImageTk.PhotoImage(Image.open("1.png"))
    all_posx.append(10)
    all_posy.append(0)
    canvas.create_image(all_posy[0], all_posx[0], anchor=NW, image=img1)

    img2 = ImageTk.PhotoImage(Image.open("2.png"))
    all_posx.append(55)
    all_posy.append(0)
    canvas.create_image(all_posy[1], all_posx[1], anchor=NW, image=img2)

    img3 = ImageTk.PhotoImage(Image.open("3.png"))
    all_posx.append(100)
    all_posy.append(0)
    canvas.create_image(all_posy[2], all_posx[2], anchor=NW, image=img3)

    img4 = ImageTk.PhotoImage(Image.open("4.png"))
    all_posx.append(145)
    all_posy.append(0)
    canvas.create_image(all_posy[3], all_posx[3], anchor=NW, image=img4)

    movescount=0
    moves_number(movescount,root)
    comment(movescount,root)

    enter.destroy()
    # здесь первые элементы списка обозначают номер шеста (в функции move берётся остаток от деления на 10), выбраны такие числа, чтобы при удалении номера кольца случайно не удалить номер шеста
    pole_1 = [10, 3, 2, 1, 0]
    pole_2 = [11]
    pole_3 = [12]
#кнопка restart закрывает текующее окно игры и открывает новое, чем полностью перезапускает игру
    restart = Button(root, text="retart", fg="black", font="Consolas 24 bold", bg='black', activebackground='black',
                     highlightbackground="#B4DD1E", justify=CENTER, command=lambda: main(),
                     width=7, bd=0)
    restart.configure(bg='#B4DD1E')
    restart.place(relx=0, rely=0.15, anchor=SW)

    start_time=time.time()

    return

def elem_start_pos():
    '''эта функция создаёт первичный интерфейс игры: фон, кнопку start и кнопки ходов'''
    global img1, img2, img3, img4, movescount, all_posx, all_posy, canvas, pole, moves, moves_pack, root, enter, pole_1, pole_2, pole_3

    all_posx = []
    all_posy = []

    canvas = Canvas(root, width=550, height=350, background="#B4DD1E", bd=0, highlightthickness=0)
    canvas.place(relx=0.5, rely=0.55, anchor=CENTER)
#это кнопка start, она вызывает функцию put_tower_pieces(), чем запускает игру
    enter = Button(root, text="start", fg="black", font="Consolas 24 bold", bg='black', activebackground='black',
                   highlightbackground="#B4DD1E", justify=CENTER, command=lambda: put_tower_pieces(),
                   width=7, bd=0)
    enter.configure(bg='#B4DD1E')
    enter.place(relx=0, rely=0.15, anchor=SW)
#здесь добавляются кнопки, отвечающие за варианты ходов, кнопка 1->3, например, переносит верхнее кольцо с первого шеста на третий
    move_1 = Button(root,text='1->2', fg="black", font="Consolas 24 bold", bg='black', activebackground='black',
                   highlightbackground="#B4DD1E", justify=CENTER, command= lambda: move(pole_1,pole_2),
                   width=7, bd=0)
    move_2 = Button(root, text='1->3', fg="black", font="Consolas 24 bold", bg='black', activebackground='black',
                    highlightbackground="#B4DD1E", justify=CENTER, command=lambda: move(pole_1,pole_3),
                    width=7, bd=0)
    move_3 = Button(root, text='2->3', fg="black", font="Consolas 24 bold", bg='black', activebackground='black',
                    highlightbackground="#B4DD1E", justify=CENTER, command=lambda: move(pole_2,pole_3),
                    width=7, bd=0)
    move_4 = Button(root, text='2->1', fg="black", font="Consolas 24 bold", bg='black', activebackground='black',
                    highlightbackground="#B4DD1E", justify=CENTER, command=lambda: move(pole_2, pole_1),
                    width=7, bd=0)
    move_5 = Button(root, text='3->1', fg="black", font="Consolas 24 bold", bg='black', activebackground='black',
                    highlightbackground="#B4DD1E", justify=CENTER, command=lambda: move(pole_3, pole_1),
                    width=7, bd=0)
    move_6 = Button(root, text='3->2', fg="black", font="Consolas 24 bold", bg='black', activebackground='black',
                    highlightbackground="#B4DD1E", justify=CENTER, command=lambda: move(pole_3, pole_2),
                    width=7, bd=0)
    move_3.configure(bg='#B4DD1E')
    move_3.place(relx=0.6, rely=0.9, anchor=SW)
    move_2.configure(bg='#B4DD1E')
    move_2.place(relx=0.5, rely=0.9, anchor=S)
    move_1.configure(bg='#B4DD1E')
    move_1.place(relx=0.4, rely=0.9, anchor=SE)
    move_6.configure(bg='#B4DD1E')
    move_6.place(relx=0.6, rely=1, anchor=SW)
    move_5.configure(bg='#B4DD1E')
    move_5.place(relx=0.5, rely=1, anchor=S)
    move_4.configure(bg='#B4DD1E')
    move_4.place(relx=0.4, rely=1, anchor=SE)
#собираем все хода в один список для удобства работы функции congratulations()
    moves_pack=[move_1, move_2, move_3, move_4, move_5, move_6]

def move(departure_pole, destination_pole):
    '''эта функция вызывается кнопками ходов, принимая два значения: departure_pole - шест, с которого игрок хочет снять кольцо, destination_pole - шест, на которой игрок хочет переместить кольцо. Функция, прежде чем осуществить ход, проверяет возможен ли он. Также функция следит за количеством ходов и именно она вызывает функцию "поздравителя" после финального хода'''
    global img1, img2, img3, img4, pole_1, pole_2, pole_3, all_posx, all_posy, destination, canvas, root, movescount, moves_pack
#здесь функция проверяет, есть ли вообще на исходном шесте кольца, чтобы что-то перекладывать
    if len(departure_pole)>1:
        item=departure_pole[-1]
#здесь задаются координаты для перемещения кольца
        posx=180*(destination_pole[0]%10)
        destination_pole_top=0
        posy = 145-45*(len(destination_pole)-1)
#проверка того, не больше ли перемещаемое кольцо верхнего кольца шеста, на который происходит перекладывание (такое по правилам головоломки делать нельзя)
        if (len(destination_pole)>1 and item<destination_pole[-1]) or len(destination_pole)<=1:
            if len(departure_pole)>1:
                destination_pole_top=destination_pole[-1]

                movescount+=1
                moves_number(movescount,root)

                if (item == 0):
#процесс перемещения происходит следующим образом: сначала перемещается изображение кольца на вычисленные ранее координаты, затем в список того шеста, на которое кольцо переместилось, с конца добавляется номер кольца (то есть в списке номера колец представлены в порядке снизу вверх), а из списка шеста, с которого кольцо сняли, номер кольца удаляется
                        img1 = ImageTk.PhotoImage(Image.open("1.png"))
                        canvas.create_image(posx,posy, anchor=NW, image=img1)
                        Tk.update(root)
                        destination_pole.append(item)
                        departure_pole.remove(item)

                elif (item == 1):

                        img2 = ImageTk.PhotoImage(Image.open("2.png"))
                        canvas.create_image(posx, posy, anchor=NW, image=img2)
                        Tk.update(root)
                        destination_pole.append(item)
                        departure_pole.remove(item)

                elif (item == 2):

                        img3 = ImageTk.PhotoImage(Image.open("3.png"))
                        canvas.create_image(posx,posy, anchor=NW, image=img3)
                        Tk.update(root)
                        destination_pole.append(item)
                        departure_pole.remove(item)

                elif (item == 3):
                        img4 = ImageTk.PhotoImage(Image.open("4.png"))
                        canvas.create_image(posx, posy, anchor=NW, image=img4)
                        Tk.update(root)
                        destination_pole.append(item)
                        departure_pole.remove(item)

                if pole_3 == [12, 3, 2, 1, 0]:
                #когда на третьем шесте удаётся собрать изначальную комбинацию (головоломка решена), выводим поздравление)
                    congratulations(root, moves_pack,movescount,time.time()-start_time)
                    return
                else:
                #эта функция срабатывает, когда минимальное количество ходов превышено, и сообщает игроку об этом
                    comment(movescount,root)
                    return

main()
